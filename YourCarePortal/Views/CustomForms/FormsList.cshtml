@using System.Globalization;
@using System.Linq;
@using System.Net;
@model FormsandClients

<!DOCTYPE html>

<html>

<head>

    <!-- Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" rel="stylesheet">

    <!-- Inter Font -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/gh/rsms/inter@v3.15/dst/inter.css">

    @{
        var uniqueClientNames1 = Model.ClientDetails.Select(a => a.clientFullName).Distinct().ToList();

        int baseHeight1 = 189;
        int additionalHeightPerClient1 = 20;
        int totalHeight1 = baseHeight1 + (uniqueClientNames1.Count * additionalHeightPerClient1);
    }

    <script>
        window.onload = function () {
            if (@Html.Raw(Json.Serialize(Context.Session.GetString("DebugFlag") == "true"))) {
                //openDebugInNewTab();
            }
        };
    </script>

    <style>

        .containerHeader {
            background-image: url("@Url.Content("~/Images/AppointmentsHdrBG.jpg")");
            height: @totalHeight1.ToString()px;
            background-size: cover;
            background-position: left;
            position: relative;
            width: 100%;
        }


        .today-label {
            position: absolute;
            top: 30px;
            left: 30px;
            color: var(--blue-blue-10, #B4E4F9);
            font-family: 'Inter', sans-serif;
            font-size: 15px;
            font-weight: 500;
            line-height: 1.2;
        }

        .welcome-label {
            position: absolute;
            top: 48px; /* 30px + 18px (line-height of the first label) */
            left: 30px;
            color: #FFF;
            font-family: 'Inter', sans-serif;
            font-size: 40px;
            font-weight: 600;
            line-height: 1.2;
        }

        .schedule-label {
            position: absolute;
            top: 93px;
            left: 30px;
            color: var(--blue-blue-10, #B4E4F9);
            font-family: 'Inter', sans-serif;
            font-size: 15px;
            font-weight: 500;
            line-height: 1.2;
        }

        .multi-clients-label {
            position: absolute;
            z-index: 1;
            top: 140px;
            left: 270px;
            color: var(--blue-blue-10, #B4E4F9);
            font-family: 'Inter', sans-serif;
            font-size: 15px;
            font-weight: 500;
            line-height: 1.2;
            padding-top: 8px;
        }

        .centered-content1 {
            z-index: 1;
            min-height: 50vh; /* adjust based on your needs */
            display: flex;
            flex-direction: column; /* This ensures children of this container are stacked vertically */
            align-items: center; /* Horizontally centers content */
            justify-content: center; /* Vertically centers content */
            font-size: 20px;
            margin-left: 50px;
            /*  margin-top:50px; */
        }

        .button-group {
            top: 260px;
            position: absolute;
            display: flex;
            justify-content: flex-start;
            align-items: center;
            margin-top: 30px;
            margin-left: 30px;
        }


        .button {
            display: inline-flex;
            align-items: center;
            background-color: #ffffff;
            color: #000000;
            border: 1px solid #cccccc;
            border-radius: 20px;
            padding: 0 13.5px;
            height: 32px;
            margin: 0 5px;
        }

            .button i {
                margin-right: 5px;
            }

            .button.all {
                background-color: #B4E4F9;
                color: #005B80;
                padding: 0 10.8px;
                border-radius: 20px;
                margin-top: 16px;
            }

            .button.active {
                background-color: lightblue;
            }


        .person-container {
            padding-left: 30px;
            position: relative;
            padding-bottom: 50px;
        }


        .entry-row > div {
            font-size: 14px;
        }

        .entry-row, .entry-header {
            font-size: 14px;
        }

        /* ... other styles ... */

        .entry-header,
        .entry-row {
            width: 40%;
            height: 35px;
            margin-bottom: 3px;
            margin-left: 0; /* left aligns the .entry-row within .form-container */
            margin-right: auto; /* allows the right side to be flexible */
            background-color: #ffffff;
        }

        /* ... other styles ... */




        /* General container styles */
        .form-container {
            border: 1px solid #ccc;
            margin-top: 20px;
            padding: 15px;
            border-radius: 5px;
            width: 1000px; /*  width: 50vw; /* Adjust as needed */
            box-sizing: border-box;
        }

        .entry-header {
            font-weight: bold;
            border-bottom: 2px solid #ccc;
            padding-bottom: 10px;
            margin-bottom: 15px;
        }

        .entry-section {
            display: flex; /* Changed to flex to ensure its children are properly aligned */
            margin-top: 10px;
            /*   flex-direction: column; */
        }

        .entry-header, .entry-row {
            display: flex;
            width: 70%; /* Adjust based on your design */
            /* justify-content: space-around; /* This will space the child elements equally */ */
        }

        .entry-item {
            text-align: left; /* Center text for each item */
            padding: 0 100px; /* Adjust padding as needed */
        }

        .entry-itemw {
            flex-grow: 1; /* Allows each item to grow equally */
            text-align: center; /* Center text for each item */
            padding: 10px; /* Adjust padding as needed for spacing */
            box-sizing: border-box; /* Include padding in the element's total width and height */
        }

        .entry-section {
            display: none;
            margin-top: 10px;
        }

        .entry-itemw {
            /*    border: 1px solid red; */
        }


        body {
            background-color: #ffffff;
        }

        .form-container {
            background-color: #ffffff;
            /* ... other styles ... */
        }

        .entry-row:hover {
            background-color: #ADD8E6; /* Light blue color */
            cursor: pointer;
        }



        .form-container {
            position: relative; /* Makes this container the reference point for absolute positioning */
            /* ... other existing styles ... */
        }

        .carrot-btn {
            position: absolute;
            right: 30px;
            top: 50%;
            transform: translateY(-50%); /* Center it vertically */
        }

        .form-container {
            /* your existing styles here... */

            cursor: pointer;
        }

        .carrot-btn {
            width: 40px; /* Adjust the width as needed */
            height: 30px; /* Adjust the height as needed */
            border: none;
            border-radius: 8px;
            background: var(--blue-blue-50, #005B80);
            color: #fff;
            font-family: 'Inter', sans-serif;
            font-size: 17px;
            line-height: 120%;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
            box-shadow: 0px 5px 3px -2px rgba(0, 0, 0, 0.02), 0px 3px 1px -2px rgba(0, 0, 0, 0.06);
        }

        .show-form {
            /*  width: 80px; /* Adjust the width as needed */ */ height: 40px; /* Adjust the height as needed */
            border: none;
            border-radius: 5px;
            background: var(--blue-blue-50, #005B80);
            color: #fff;
            font-family: 'Inter', sans-serif;
            font-size: 17px;
            line-height: 120%;
            cursor: pointer;
            display: flex;
            justify-content: center;
            align-items: center;
            box-shadow: 0px 5px 3px -2px rgba(0, 0, 0, 0.02), 0px 3px 1px -2px rgba(0, 0, 0, 0.06);
            flex-grow: 0; /* Prevents the button from growing */
        }

        .show-form-row {
            /*  width: 80px; /* Adjust the width as needed */ */ height: 40px; /* Adjust the height as needed */
            border: none;
            border-radius: 5px;
            background: var(--blue-blue-50, #005B80);
            color: #fff;
            font-family: 'Inter', sans-serif;
            font-size: 17px;
            line-height: 120%;
            cursor: pointer;
            display: flex;
            justify-content: left;
            align-items: center;
            box-shadow: 0px 5px 3px -2px rgba(0, 0, 0, 0.02), 0px 3px 1px -2px rgba(0, 0, 0, 0.06);
            flex-grow: 0; /* Prevents the button from growing */
            margin-top: 5px;
            margin-bottom: 5px;
        }

        .form-container {
            background-color: #f3f3f3;
        }

        .formsContainerlarge {
            position: absolute;
            top: 350px;
        }

        .disabled {
            color: #808080; /* Grey color */
        }

        .form-type {
            font-size: 22px;
            font-weight: 600;
            margin-bottom: 10px;
        }

    </style>

</head>

<body>

    <div class="containerHeader">
        <div class="welcome-label">Forms</div>
        <div class="schedule-label">Below are the Forms for your connection(s).</div>
    </div>

    @{
        var uniqueClientNames = Model.ClientDetails.Select(a => a.clientFullName).Distinct().ToList();
    }

    <div class="multi-clients-label">
        <div>You are connected with multiple clients:</div>
        <ul>
            @foreach (var clientName in uniqueClientNames)
            {
                <li>@WebUtility.HtmlDecode(clientName)</li>
            }
        </ul>
    </div>

    @{
        var uniqueClients = Model.ClientDetails
        .GroupBy(a => new { a.clientID, a.clientFullName })
        .Select(g => g.First())
        .ToList();
    }


    <div class="custom-container1">
        <div class="button-group">

            @if (uniqueClientNames.Count > 1)
            {
                @foreach (var client in uniqueClients)
                {
                    <button class="button client-button rounded-pill" data-clientid="@client.clientID" id="client_btn_@client.clientID">
                        <i class="fa-solid fa-user"></i> @client.clientFullName
                    </button>
                }
            }
        </div>
    </div>

    <div class="formsContainerlarge">
        @Html.Partial("FormsPartial", Model)
    </div>

    <!-- jQuery and Bootstrap JS -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.bundle.min.js"></script>

    <script>

        $(document).ready(function () {
            $('.client-button').on('click', function () {
                var selectedClientID = $(this).data('clientid');

                console.log("client button clicked"); // Add this
                startProcessing();
                // UI Feedback
                $('.button').removeClass('active');
                $(this).addClass('active');

                updateBudget(selectedClientID);
            });

            function updateBudget(clientId) {
                var dataToSend = {
                    clientId: clientId
                };

                console.log(clientId); // Add this

                $.ajax({
                    url: '/CustomForms/FormsAction',
                    type: 'GET',
                    data: dataToSend,
                    success: function (data) {
                        $('#formsContainerlarge').html(data);
                        stopProcessing();
                    },
                    error: function (error) {
                        console.error("Error fetching client details:", error);
                        stopProcessing();
                    }
                });
            }
        });

    </script>

    <script>
        function startProcessing() {
            document.body.classList.add('waiting-cursor');
            // Your processing logic here

            // When done, call stopProcessing
            //stopProcessing();
        }

        function stopProcessing() {
            document.body.classList.remove('waiting-cursor');
        }
    </script>

    <script>

        $(document).ready(function () {
            adjustFormsContainer();
            $(window).resize(adjustFormsContainer); // Adjust on window resize

            function adjustFormsContainer() {
                var uniqueClientsCount = @Html.Raw(Json.Serialize(uniqueClients.Count));
                if (uniqueClientsCount === 1) {
                    // Adjust for a single client
                    $('.formsContainerlarge').css('top', '250px'); // adjustment
                } else {
                    // Default or no adjustment needed
                    $('.formsContainerlarge').css('top', '350px'); // Reset to default
                }
            }
        });

    </script>

</body>

</html>
